/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TypesImport } from './routes/types'
import { Route as RouteUtilsImport } from './routes/route-utils'
import { Route as RouteGuardImport } from './routes/route-guard'
import { Route as IndexImport } from './routes/index'
import { Route as PublicRoutesImport } from './routes/public.routes'
import { Route as PanelRoutesImport } from './routes/panel.routes'
import { Route as AuthRoutesImport } from './routes/auth.routes'

// Create/Update Routes

const TypesRoute = TypesImport.update({
  id: '/types',
  path: '/types',
  getParentRoute: () => rootRoute,
} as any)

const RouteUtilsRoute = RouteUtilsImport.update({
  id: '/route-utils',
  path: '/route-utils',
  getParentRoute: () => rootRoute,
} as any)

const RouteGuardRoute = RouteGuardImport.update({
  id: '/route-guard',
  path: '/route-guard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoutesRoute = PublicRoutesImport.update({
  id: '/public/routes',
  path: '/public/routes',
  getParentRoute: () => rootRoute,
} as any)

const PanelRoutesRoute = PanelRoutesImport.update({
  id: '/panel/routes',
  path: '/panel/routes',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoutesRoute = AuthRoutesImport.update({
  id: '/auth/routes',
  path: '/auth/routes',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/route-guard': {
      id: '/route-guard'
      path: '/route-guard'
      fullPath: '/route-guard'
      preLoaderRoute: typeof RouteGuardImport
      parentRoute: typeof rootRoute
    }
    '/route-utils': {
      id: '/route-utils'
      path: '/route-utils'
      fullPath: '/route-utils'
      preLoaderRoute: typeof RouteUtilsImport
      parentRoute: typeof rootRoute
    }
    '/types': {
      id: '/types'
      path: '/types'
      fullPath: '/types'
      preLoaderRoute: typeof TypesImport
      parentRoute: typeof rootRoute
    }
    '/auth/routes': {
      id: '/auth/routes'
      path: '/auth/routes'
      fullPath: '/auth/routes'
      preLoaderRoute: typeof AuthRoutesImport
      parentRoute: typeof rootRoute
    }
    '/panel/routes': {
      id: '/panel/routes'
      path: '/panel/routes'
      fullPath: '/panel/routes'
      preLoaderRoute: typeof PanelRoutesImport
      parentRoute: typeof rootRoute
    }
    '/public/routes': {
      id: '/public/routes'
      path: '/public/routes'
      fullPath: '/public/routes'
      preLoaderRoute: typeof PublicRoutesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/route-guard': typeof RouteGuardRoute
  '/route-utils': typeof RouteUtilsRoute
  '/types': typeof TypesRoute
  '/auth/routes': typeof AuthRoutesRoute
  '/panel/routes': typeof PanelRoutesRoute
  '/public/routes': typeof PublicRoutesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/route-guard': typeof RouteGuardRoute
  '/route-utils': typeof RouteUtilsRoute
  '/types': typeof TypesRoute
  '/auth/routes': typeof AuthRoutesRoute
  '/panel/routes': typeof PanelRoutesRoute
  '/public/routes': typeof PublicRoutesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/route-guard': typeof RouteGuardRoute
  '/route-utils': typeof RouteUtilsRoute
  '/types': typeof TypesRoute
  '/auth/routes': typeof AuthRoutesRoute
  '/panel/routes': typeof PanelRoutesRoute
  '/public/routes': typeof PublicRoutesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/route-guard'
    | '/route-utils'
    | '/types'
    | '/auth/routes'
    | '/panel/routes'
    | '/public/routes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/route-guard'
    | '/route-utils'
    | '/types'
    | '/auth/routes'
    | '/panel/routes'
    | '/public/routes'
  id:
    | '__root__'
    | '/'
    | '/route-guard'
    | '/route-utils'
    | '/types'
    | '/auth/routes'
    | '/panel/routes'
    | '/public/routes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RouteGuardRoute: typeof RouteGuardRoute
  RouteUtilsRoute: typeof RouteUtilsRoute
  TypesRoute: typeof TypesRoute
  AuthRoutesRoute: typeof AuthRoutesRoute
  PanelRoutesRoute: typeof PanelRoutesRoute
  PublicRoutesRoute: typeof PublicRoutesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RouteGuardRoute: RouteGuardRoute,
  RouteUtilsRoute: RouteUtilsRoute,
  TypesRoute: TypesRoute,
  AuthRoutesRoute: AuthRoutesRoute,
  PanelRoutesRoute: PanelRoutesRoute,
  PublicRoutesRoute: PublicRoutesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/route-guard",
        "/route-utils",
        "/types",
        "/auth/routes",
        "/panel/routes",
        "/public/routes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/route-guard": {
      "filePath": "route-guard.tsx"
    },
    "/route-utils": {
      "filePath": "route-utils.tsx"
    },
    "/types": {
      "filePath": "types.ts"
    },
    "/auth/routes": {
      "filePath": "auth.routes.tsx"
    },
    "/panel/routes": {
      "filePath": "panel.routes.tsx"
    },
    "/public/routes": {
      "filePath": "public.routes.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
